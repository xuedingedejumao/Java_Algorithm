package Data_Structure;

import java.util.ArrayList;
import java.util.Arrays;

public class DFS {
    private int[][]  edges;
    private int numofEdge;
    private ArrayList<String> vertexList;
    private boolean[] isVisited;

    public static void main(String[] args) {
        int n = 5;
        String vertexvalue[]  = {"A","B","C","D","E"};
        Graph graph = new Graph(n);

        for(String vertex:vertexvalue){
            graph.insertVertex(vertex);
        }

        graph.insertEdge(0,1,1);
        graph.insertEdge(0,2,1);
        graph.insertEdge(1,2,1);
        graph.insertEdge(1,3,1);
        graph.insertEdge(1,4,1);

        graph.show();
    }
    //获得第一个临接节点下标
    public int getFirstNeighbor(int index) {
        for(int j = 0; j < vertexList.size();j++){
            if(edges[index][j] > 0){
                return j;
            }
        }
        return -1;
    }

    //根据前一个邻接节点的下标来获取下一个邻接节点
    public int getNextNeighbor(int v1,int v2){
        for(int j = v2 + 1;j < vertexList.size();j++){
            if(edges[v1][j] > 0){
                return j;
            }
        }
        return -1;
    }

    public void dfs(boolean[] isVisited,int i){
        System.out.println(getvalueByIndex(i) + "->");
        isVisited[i] = true;

        int w = getFirstNeighbor(i);

        while (w != -1){
            if(!isVisited[w]){
                dfs(isVisited,w);
            }

            w = getNextNeighbor(i,w);
        }
    }
    //重载
    public void dfs(){
        for(int i = 0;i < )
    }

    public int getNumofVertex(){
        
    }

    public String getvalueByIndex(int i){
        return vertexList.get(i);
    }

    public void show(){
        for(int[] link:edges){
            System.out.println(Arrays.toString(link));
        }
    }

    public DFS(int n){
        edges = new int[n][n];
        vertexList = new ArrayList<>(n);
        numofEdge = 0;
        isVisited = new boolean[n];
    }

    public void insertVertex(String vertex){
        vertexList.add(vertex);
    }

    public void insertEdge(int v1,int v2,int weight){
        edges[v1][v2] = weight;
        edges[v2][v1] = weight;
        numofEdge++;
    }
}
