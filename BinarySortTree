public class BinarySortTree_Demo {
    public static void main(String[] args) {
        int[] arr = {7,3,10,12,5,1,9};
        binarysorttree binarysorttree = new binarysorttree();
        for(int i = 0;i < arr.length;i++){
            binarysorttree.add(new Node(arr[i]));
        }
        System.out.println("infix:");
        binarysorttree.infixorder();
    }
}

class binarysorttree{
    private Node root;
    public void add(Node node){
        if(root == null){
            root = node;
        }else {
            root.add(node);
        }
    }
    public void infixorder(){
        if(root != null){
            root.infixorder();
        }else {
            System.out.println("Tree Empty!");
        }
    }

    public Node search(int value){
        if(root == null)return null;
        else {
            return root.search(value);
        }
    }

    public Node searchPar(int value){
        if(root == null)return null;
        else {
            return root.searchPar(value);
        }
    }

    public void delNode(int value){
        if(root == null){
            return;
        }else {
            Node target = search(value);
            if(target == null)return;
            if(root.left == null && root.right == null){
                root = null;
                return ;
            }
            Node parent = searchPar(value);
            if(target.left == null && target.right == null){
                if(parent.left != null && parent.left.value == value){
                    parent.left = null;
                }else if(parent.right != null && parent.right.value == value){
                    parent.right = null;
                }
            }
        }
    }
}

class Node{
    int value;
    Node left;
    Node right;
    Node(int value){
        this.value = value;
    }

    public void add(Node node){
        if(node == null)return;

        if(node.value < this.value){
            if(this.left == null){
                this.left = node;
            }else {
                this.left.add(node);
            }
        }else {
            if(this.right == null){
                this.right = node;
            }else {
                this.right.add(node);
            }
        }
    }

    public Node search(int value){
        if(value == this.value){
            return this;
        }else if(value < this.value){
            if(this.left == null)return null;
            return this.left.search(value);
        }else{
            if(this.right == null) return null;
            return this.right.search(value);
        }
    }

    public Node searchPar(int value){
        if((this.left != null && this.left.value == value) || (this.right != null && this.right.value == value) ){
            return this;
        }else {
            if(value < this.value && this.left != null){
                return this.left.searchPar(value);
            }else if(value >= this.value && this.right != null){
                return this.right.searchPar(value);
            }else {
                return null;
            }
        }
    }

    @Override
    public String toString() {
        return "Node{" +
                "value=" + value +
                '}';
    }

    public void infixorder(){
        if(this.left != null){
            this.left.infixorder();
        }
        System.out.println(this.value);
        if(this.right != null){
            this.right.infixorder();
        }
    }
}
