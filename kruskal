package Date_Structure;

import java.util.Arrays;

public class Kruskal {
    private int edgeNum;
    private char[] vertex;
    private int[][] matrix;
    private static final int INF = Integer.MAX_VALUE;

    public static void main(String[] args) {
        char[] vertex = {'A','B','C','D','E','F','G'};
        int[][] martex = {
                {0,12,INF,INF,INF,16,14},
                {12,0,10,INF,INF,7,INF},
                {INF,10,0,3,5,6,INF},
                {INF,INF,3,0,4,INF,INF},
                {INF,INF,5,4,0,2,8},
                {16,7,6,INF,2,0,9},
                {14,INF,INF,INF,8,9,0},};
        Kruskal kruskal = new Kruskal(vertex,martex);

        kruskal.print();

        System.out.println(Arrays.toString(kruskal.getEdge()));
        EData[] edges = kruskal.getEdge();
        System.out.println("befor:");
        System.out.println(Arrays.toString(edges));
        System.out.println("after");
        kruskal.sortEdges(edges);
        System.out.println(Arrays.toString(edges));
    }

    public Kruskal(char[] vertex ,int[][] matrix){
        int vlen = vertex.length;

        this.vertex = vertex;

        this.matrix = matrix;

        for(int i = 0;i < vlen;i++){
            for(int j = 0;j < vlen ;j++){
                if(this.matrix[i][j] != INF){
                    edgeNum++;
                }
            }
        }
    }

    public void print() {
        System.out.println("邻接矩阵为：");
        for(int i = 0;i <vertex.length;i++){
            for(int j = 0;j < vertex.length;j++){
                System.out.printf("%20d",matrix[i][j]);
            }
            System.out.println();
        }
    }

    //边排序
    private void sortEdges(EData[] edges){
        for(int i = 0;i < edges.length-1;i++){
            for(int j = 0;j <edges.length -1-i;j++){
                System.out.println(j);
                System.out.println(j+1 +" *");
                System.out.println(edges[j]);
                System.out.println(edges[j+1]+"$");
                if(edges[j].weight > edges[j+1].weight){
                    EData temp = edges[j];
                    edges[j] = edges[j+1];
                    edges[j+1] = temp;
                }
            }
        }
    }

    private int getPosition(char ch){
        for(int i = 0;i < vertex.length;i++){
            if(vertex[i] == ch){
                return i;
            }
        }
        return -1;
    }

    private EData[] getEdge(){
        int index = 0;
        EData[] edges= new EData[edgeNum];
        for(int i = 0;i < vertex.length;i++){
            for(int j = i+1;j < vertex.length;j++){
                if(matrix[i][j] != INF){
                    edges[index++] = new EData(vertex[i],vertex[j],matrix[i][j]);
                }
            }
        }
        return edges;
    }
}

class EData {
    char start;//边的一个点
    char end;//边的另一个点

    int weight;
    public EData(char start,char end ,int weight){
        this.start = start;
        this.end = end;
        this.weight = weight;
    }

    @Override
    public String toString() {
        return "EData{" +
                "start=" + start +
                ", end=" + end +
                ", weight=" + weight +
                '}';
    }
}
