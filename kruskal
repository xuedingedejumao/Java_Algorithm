public class Kruskal {

    private int edgeNum;
    private char[] vertex;
    private int[][] matrix;
    private static final int INF = Integer.MAX_VALUE;

    public static void main(String[] args) {
        char[] vertex = {'A','B','C','D','E','F','G'};
        int[][] martex = {
                {0,12,INF,INF,INF,16,14},
                {12,0,10,INF,INF,7,INF},
                {INF,10,0,3,5,6,INF},
                {INF,INF,3,0,4,INF,INF},
                {INF,INF,5,4,0,2,8},
                {16,7,6,INF,2,0,9},
                {14,INF,INF,INF,8,9,0},};
        Kruskal kruskal = new Kruskal(vertex,martex);

        kruskal.print();

        System.out.println("-----------------------------");
        kruskal.kruskal();
    }

    public Kruskal(char[] vertex ,int[][] matrix){
        int vlen = vertex.length;

        this.vertex = vertex;

        this.matrix = matrix;

        for(int i = 0;i < vlen;i++){
            for(int j = i+1;j < vlen ;j++){
                if(this.matrix[i][j] != INF){
                    edgeNum++;
                }
            }
        }
    }

    public void print() {
        System.out.println("邻接矩阵为：");
        for(int i = 0;i <vertex.length;i++){
            for(int j = 0;j < vertex.length;j++){
                System.out.printf("%20d",matrix[i][j]);
            }
            System.out.println();
        }
    }

    //边排序
    private void sortEdges(EData[] edges){
        for(int i = 0;i < edges.length-1;i++){
            for(int j = 0;j <edges.length -1-i;j++){
                if(edges[j].weight > edges[j+1].weight){
                    EData temp = edges[j];
                    edges[j] = edges[j+1];
                    edges[j+1] = temp;
                }
            }
        }
    }

    private int getPosition(char ch){
        for(int i = 0;i < vertex.length;i++){
            if(vertex[i] == ch){
                return i;
            }
        }
        return -1;
    }

    private EData[] getEdge(){
        int index = 0;
        EData[] edges= new EData[edgeNum];
        for(int i = 0;i < vertex.length;i++){
            for(int j = i+1;j < vertex.length;j++){
                if(matrix[i][j] != INF){
                    edges[index++] = new EData(vertex[i],vertex[j],matrix[i][j]);
                }
            }
        }
        return edges;
    }
    /*
     *获取下标为i的顶点的终点
     *用于判断两顶点终点是否相同
     *ends[]:记录了各个顶点终点
     * 返回的就是下标为i的顶点对应终点的下标
     */
    private int  getEnd(int[] ends,int i ){
        while(ends[i]!=0){
            i = ends[i];
        }
        return i;
    }

    public void kruskal(){
        int index = 0;//表示最后结果数组的索引
        int[] ends = new int[edgeNum];//保存已有最小生成树中的每个顶点在最小生成树中的终点
        //创建结果数组，保存最后的最小生成树
        EData[] res = new EData[edgeNum];
        //获取图中所有的边的集合，一共12条边
        EData[] edges = getEdge();
        //按照边的权值大小排序
        sortEdges(edges);

        //遍历edges 数组，将边添加到最小生成树中时，判断是否形成回路，如果没有，加入rets，否则不能加入
        for(int i = 0;i < edgeNum;i++){
            //获取第i条边的第一个顶点（起点）
            int p1 = getPosition(edges[i].start);
            //获取第i条边的第一个顶点（起点）
            int p2 = getPosition(edges[i].end);

            //获取p1这个顶点在已有最小生成树中终点
            int m = getEnd(ends,p1);
            //获取p2这个顶点在已有最小生成树中终点
            int n = getEnd(ends,p2);
            //是否构成回路  (m 和 n 是否相等）
            if(m != n){
                ends[m] = n;//设置m在“已有最小生成树”终点 <E,F> [0,0```0]
                res[index++] = edges[i];//有一条边加入到res数组
            }
        }
        //统计并打印最小生成树，输出res
        for(int i = 0;i < index;i++) {
            System.out.println(res[i]);
        }
    }
}

class EData {
    char start;//边的一个点
    char end;//边的另一个点

    int weight;
    public EData(char start,char end ,int weight){
        this.start = start;
        this.end = end;
        this.weight = weight;
    }

    @Override
    public String toString() {
        return "EData{" +
                "<" + start +
                "," + end +
                ">=" + weight +
                '}';
    }
}

